<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:taxo="http://purl.org/rss/1.0/modules/taxonomy/" xmlns:activity="http://activitystrea.ms/spec/1.0/" ><channel><title>明月の開発ストーリ</title><link>https://www.nowonbun.com</link><description>Test</description><language>ja</language><pubDate>Sat, 6 Jul 2019 00:55:00 +0900</pubDate><generator>nowonbun@gmail.com</generator><managingEditor>nowonbun@gmail.com</managingEditor><webMaster>nowonbun@gmail.com</webMaster><item><title>[C# スタディ - 10] 制御文 - ループ(for, while, do〜while, foreach)</title><link>https://www.nowonbun.com/11.html</link><description><![CDATA[こんにちは。明月です。前の投稿で分岐に関して勉強しました。今日は引き続いて制御文のループに関して勉強します。ループは単語のいみとおりに繰り返す処理ということです。ループの種類は「for」、「while」、「do〜while」、「foreach」の４つがあります。for 文「for」文は初期化より終了条件が偽になるまで増減値を変換しながら繰り返す制御文です。例を見ると「i」の変数に「0」の値を初期して「i &lt; 10」の条件をチェックします。結果が「真」になるので「console.writeline(i);」を実行します。文の処理が終わって増減式に行って「i」の値を増加(i = 1)します。また「i &lt; 10」の条件をチェックしてまた「真」になるので「console.writelist(i);」を実行します。そのままに「i」の値が「10」になるまで繰り返します。while 文「while」文は条件式が真になる間に繰り返す制御文です。「while」文は「for」文の初期式と増減式が除いてるものです。上の例をみると「while」文には別に増減式がないので「i++」を除いたら無限ループ(ループが終わらない状態)になる可能性があるので気をつけてください。do〜while 文「do〜while」文は「while」と似ています。でも「while」は初めから条件式をチェックして繰り返しますが「do〜while」文は１回実行した後から条件式をチェックします。「do〜while」文は条件をチェックして文を実行することではなく文を実行してから条件を繰り返すかをチェックするものです。上の例を見るとwhileの場合は「i &lt; 0」の条件に満たさないので「console.writeline("while" + i);」が実行されなかったです。でも「do〜while」文の場合は「console.writeline("do while " + i);」を１回に実行した後に条件文をチェックするので「do while 0」が出力されました。実際にプロジェクトする時に「do〜while」文は一般ループと流れが違うから判断がつかないことが多く発生します。それで「do〜while」文を使うのはお勧めしません。foreach 文配列またはリストの個数のほどに繰り返します。「foreach」はデザインパタンの「iterator」パタン]]></description><category>Study / C#</category><author>nowonbun@gmail.com</author><guid>https://www.nowonbun.com/11.html</guid><pubDate>Sat, 6 Jul 2019 00:54:52 +0900</pubDate></item><item><title>[C# スタディ - 9] 制御文 - 分岐 (if, switch〜case, goto)</title><link>https://www.nowonbun.com/10.html</link><description><![CDATA[こんにちは。明月です。今日からは制御文を勉強します。プログラムの制御文はc#だけではなく、c言語やjavaと同じです。そしてその中で制御文は大きく３つの形で分けます。プログラムの流れで何の項目を選んで流すかを決める分岐制御、特定ブロックの流れを繰り返すループ、ループの流れを分岐するループ分岐があります。その中で今日は分岐(if, switch〜case, goto)を勉強します。if〜else if〜else文if〜else if〜else文は真、偽によって処理する制御文です。上の例を説明すると変数「a」の値は「5」なので一つ目の分岐では「else if(a &gt; 0)」を通って「console.writeline("文２");」になります。次の変数「b」の場合は「true」だから「if」の条件を満たします。それで「console.writeline("文４");」に実行されます。最後も「if」条件を満たすので「console.writeline("文６");」を実行します。switch文「switch」は制御条件値が間に合うところを処理するマルチ制御文です。上の例を見ると変数「a」は「5」の値が格納されています。それで「switch」の「case 5」を通って「console.writeline("文１");」を実行します。c#の「switch」文は他の言語と違うところがあります。それはc++、javaの場合は「switch〜case」に行って「break」を付けないことができます。「break」がなければ次の文に実行する処理になるがc#の場合はこの「case」の後に「break」が必須キーワードなので「break」を利用して次の段階に行く処理がありません。goto文「goto」文はラベルの部分に強制的に移動する制御文です。そして「goto」文はプログラムの中で使わない制御文です。なぜならプログラムの中で「goto」文が多いなら性能(パフォーマンス)が悪くなるし、後でソース管理が大変になるからです。参考してください。上の例を見ると実行中で「goto test」文にあうと「test」ラベルに移動ます。今日は制御文の分岐に関して勉強しました。その中で「if」の場合はプログラムで一番多く使う制御なのでよく覚えて行きましょう。]]></description><category>Study / C#</category><author>nowonbun@gmail.com</author><guid>https://www.nowonbun.com/10.html</guid><pubDate>Sat, 6 Jul 2019 00:39:35 +0900</pubDate></item><item><title>[C# スタディ - 8] 演算子</title><link>https://www.nowonbun.com/9.html</link><description><![CDATA[こんにちは。明月です。今日はプログラムの演算子について勉強します。プログラムは演算子が数学らしい数式の演算子があるし、その以外に論理演算子、条件演算子などもあります。演算子に関することは下記の表と例を参考して詳しく説明します。          演算子タイプ                演算子                                例                                   数式演算子                +, -, *, /, %                                int a = (x + y - z) * (b / c) % d;                                                        割当演算子                =, +=, -=, *=, /=, %=                int a = 100;sum += a;                                        増加/減少演算子                ++, --                int i = 1;i++;                                        論理演算子                &amp;&amp; (and), || (or), ! (not)                if ((a &gt; 1 &amp;&amp; b &lt; 0) || c == 1 || !d)                                        関係/比較演算子                &lt;, &gt;, ==, !=, &gt;=, &lt;=                if (a &lt;= b)                                        ビット演算子                &amp; (and), | (or), ^ (xor)                byte a=7;byte b=(a &amp; 3) | 4;                                        シフト]]></description><category>Study / C#</category><author>nowonbun@gmail.com</author><guid>https://www.nowonbun.com/9.html</guid><pubDate>Fri, 5 Jul 2019 00:13:41 +0900</pubDate></item><item><title>[C# スタディ - 7] 配列とリスト(List)、 そしてArrayList</title><link>https://www.nowonbun.com/8.html</link><description><![CDATA[こんにちは。明月です。今日は配列について勉強します。我々がプログラムを作成すれば変数宣言をたくさんすると思います。例えば、１ヶ月のスケジュールのプログラムを作成すると思えば１ヶ月間のデータを格納する変数が必要だと思います。さらに考えると、１ヶ月ではなく１年分だと思うと365個の変数が必要です。そうするとソース管理が大変になると思います。それでその場合は同じタイプの変数を結んで配列に作ります。配列の仕様方法については下記のとおりになります。上の列例を見ると整数タイプの「int」系で「test」の変数に10個を宣言すると意味になります。配列は「0」番から始まって10個なので、「9」番までメモリに宣言されます。もし「10」番以上にデータを入れるとエラーになります。こんなみたいに配列を使う場合、何個を使うかを決めて宣言します。プログラム設計によって違うと思いますが、プログラムで変数を何個を使うか知らないケースもあります。その場合にできるほど、大きく配列を宣言するのはできないので、動的の配列、すなわちリストを使います。c#ではlistはクラス形態なので仕様方法は、下記とおりになります。配列を比べてリストは個数宣言が必要なく使います。でも今回は個数でけではなくデータタイプも知らないケースがあります。その場合はlist&lt;object&gt;を使っても良いですが、クラスとしてはarraylistがあります。今まで配列、リスト(list)、arraylistについて勉強しました。機能だけ見るとarraylistが使いやすいし、配列は厳しそうですね。それならarraylistだけ使えばいいと思いになりますが、配列とarraylistの差は利便性だけではなく、性能(パフォーマンス)も差があります。リスト、arraylistはクラスタイプなので構造体の配列より遅くなります。(配列リストの場合は再宣言、連携リストの場合は検索)データ処理量が少なければ何でも使っても構わないですが、大量のデータの場合はどんなタイプを使うかのことで実行速度の差が発生します。それで正確に使うのがプログラム品質のため良いと思います。]]></description><category>Study / C#</category><author>nowonbun@gmail.com</author><guid>https://www.nowonbun.com/8.html</guid><pubDate>Fri, 5 Jul 2019 00:14:08 +0900</pubDate></item><item><title>[C# スタディ - 6] 変数と定数</title><link>https://www.nowonbun.com/7.html</link><description><![CDATA[こんにちは。明月です。今日は変数と定数、すなわちメモリにデータを格納する場所について勉強します。プログラムを作成して、様々な数を計算すると結果の値を何処か格納して保管する必要があります。そのため、プログラムを下記の形式で作成しなければならないです。上のことを見ると変数はメモリに格納する場所になることは分かりました。それならプログラムの設計によってデータが変わらないデータもある可能性がありますね。その時に変数宣言する仕方で「const」をつけると変わらない変数、すなわち定数になります。変数の場合は宣言する場所によって変数の使用方法が変わります。メンバ変数の場合はクラスが生成する時に生成されてクラスが解除する時に解除します。ローカルの場合はローカルブロックが閉じる時に解除します。この変数のcycleはクラスを勉強する時に詳しく勉強するので、今は使う仕方だけちゃんと覚えて行きましょう。]]></description><category>Study / C#</category><author>nowonbun@gmail.com</author><guid>https://www.nowonbun.com/7.html</guid><pubDate>Thu, 4 Jul 2019 00:13:06 +0900</pubDate></item><item><title>[C# スタディ - 5] データタイプとリテラル(literal)、 Nullable</title><link>https://www.nowonbun.com/6.html</link><description><![CDATA[こんにちは。明月です。今日はデータタイプとリテラル(literal)、nullableについて勉強します。とりあえず、データタイプについて説明します。我々がパソコンでプログラムを作ることは大きい計算機を作ることだと思うと良いです。利用の目的は差異があると思いますが、ゲーム、デザインツール、バッチプログラムなども内部を見ると結局に数の計算になっています。人間は整数、実数の区別せずに計算ができますが、パソコンの場合は整数、実数、文字が完全に分けてあります。それをデータタイプと命名してメモリを宣言する時に定義します。そうするとデータタイプ種類と説明に下記に記述します。          c#データタイプ    .netデータタイプ    説明              bool    system.boolean    true or false                      byte                system.byte                8ビットunsigned integer                                        sbyte                system.sbyte                8ビットsigned integer                                        short                system.int16                16ビットsigned integer                                        int                system.int32                32ビットsigned integer                                        long                system.int64                64ビットsigned integer                                        ushort                system.uint16                16ビットunsigned integer                ]]></description><category>Study / C#</category><author>nowonbun@gmail.com</author><guid>https://www.nowonbun.com/6.html</guid><pubDate>Thu, 4 Jul 2019 00:20:32 +0900</pubDate></item><item><title>[C# スタディ - 4] コメント</title><link>https://www.nowonbun.com/5.html</link><description><![CDATA[こんにちは。明月です。前の投稿でプログラムの基本構造について勉強しました。そう見るとアセンブラーよりは読みやすいですが、人間が読みやすいには言えません。簡単なプログラムなら解読するのが大変ではないけど、複雑度が上がるとコードを読むのがだんだん大変になると思いますね。それでプログラムをコーディング式ではなく、人が読みやすい方法でコメントがあります。プログラム中でコメントを付ける方法は３つがあります。改行タイプのコメントです。使用方法は改行頭に「//」を付けて使います。次はブロックタイプのコメントがあります。使用方法は下記とおりです。ブロックタイプのコメントは重複処理ができないので、使用するときに注意が必要です。最後にxmlコメントがあります。xmlコメントはプロジェクトが終了する時にxmlコメントでマニュアルを生成できるコメントです。javaの場合はjavadocと同じコメントです。(でも実際にxmlコメントでマニュアルまで生成しません。機能としてはありますが…)使用方法はclass頭あるいはmethod頭で「///」を付けて使います。xmlコメントの場合各タグがあって、タグ別で説明する区切りがあります。下記の表を参考してください。          xmlコメントタグ    説明              summary    形式あるいは形式メンバ設定          remarks    詳細な説明          para    remarksの追加説明          value    プロパティの説明          example    使用例          list    リストとテーブル生成          code    何行目のコードで表示する時に使用          see    テキスト内部のリンク指定          seealso    参考部分に表せるテキスト指定          exception    例外説明          permision    接近権限説明          param    メソッドのパラメター説明          return    返却値を説明          c    説明中で含めているコード      プロジェクトを進める時に簡単なプログラムは一人で作成できますが、普通のプロジェクトならチームを組んで進めると思]]></description><category>Study / C#</category><author>nowonbun@gmail.com</author><guid>https://www.nowonbun.com/5.html</guid><pubDate>Wed, 3 Jul 2019 00:01:13 +0900</pubDate></item><item><title>[C# スタディ - 3]  基本構造と「Hello world」</title><link>https://www.nowonbun.com/4.html</link><description><![CDATA[こんにちは。明月です。今日からc#の基本文法について勉強します。それならvisualstudioを起動して新しいプロジェクト(ctrl+shift+n)を生成しましょう。そうすれば下記とおりに画面が出ますね。テンプレート項目で「コンソールアプリケーション」というリストを選択します。その後で「名前」項目にプロジェクト名を書き込みます。(私の場合はhelloworldということに書き込みました。)そして「ok」ボタンを押下して新しいプロジェクトを生成します。新しいプロジェクトが開けると基本的なプログラムの構造は準備しています。次の投稿から具体的に勉強するので、今日は一旦「namespace」の中で「class」の中で「main」のメソッドにコードを書き込んで作業します。これから「helloworld」を出力しましょう。c#でコンソール関連クラスは「console」のクラスです。その中で出力するメソッドは「write」あるいは「writeline」のメソッドを利用します。その通りにコーディングをすると下記みたいになります。ソースコーディングが作成できたら「f5」キーを押下してデバックをしましょう。結果は予想とおりに得ました。ちなみにコーディングについて説明します。コーディング内容を見ると行の最後にセミコロン(;)があります。それはブロックを開閉表示(｛、｝)以外にソース命令語が終了する時にセミコロンをつけることでコーディング約束が決めています。初心者の場合はセミコロンの漏れでコンパイルエラーが発生する時があるのでご注意してください。また、上のソースを見ると最後に「console.writeline(“press any key…”); consolre.readlist();」の部分があります。その部分を消して実行(f5)するとあっというまで結果コンソールが開いて閉じます。それならソース実行結果を確認できないのでしばらくにはソースを組む時にその2行ソースを追加しましょう。ここまで「helloworld」を出力しましたが、考えよりプログラムが簡単に作成できましたよね。c#の利点は初心者も簡単にしやすくプログラムを作成できるし開発進入壁が低いことです。でもどんな言語でも開発が複雑になると言語の特徴を100％に活かせる必要がありますので勉強が必要です。]]></description><category>Study / C#</category><author>nowonbun@gmail.com</author><guid>https://www.nowonbun.com/4.html</guid><pubDate>Wed, 3 Jul 2019 00:00:53 +0900</pubDate></item><item><title>[C# スタディ - 2] IDE(統合開発環境)のインストール</title><link>https://www.nowonbun.com/3.html</link><description><![CDATA[こんにちは。明月です。今日はc#開発環境を構築します。c#を開発するようにはmicrosoftのvisual studioが必要です。visual studioは昔には高いツールだったんでしたが、最近はcommunityバージョンで無料で提供しています。url - visual studio download現在(2019年7月)は上のurlで接続して下記の形のホームページが出ます。実際にホームページを見ると様々なダウンロードボタンがありますが我々は「community」バージョンをダウンロードして勉強します。さて、インストールファイルをダウンロードが完了し実行するとインストールが始まりますね。インストールが完了したらvisualstudioを実行してみましょう。始めに実行すると「初期のemailアドレスを入力して登録してください。」という意味のメッセージが出ます。既存にmicrosoftのホームページに接続してログインしたemailのアドレスを入力してemailから認証番号をもらいます。もし、登録してないならmicrosoftホームページに行って登録してください。(私の場合は既存に登録したので手続きは省略します。)認証番号登録が完了すると下記のとおりにメッセージが出て次の段階に超えます。最終に上の画面が出ますとインストールが成功です。ここまでc#の開発準備を完了しました。次の投稿ではc#のプログラム基本構造を勉強し、「helloworld」を出力しましょう。]]></description><category>Study / C#</category><author>nowonbun@gmail.com</author><guid>https://www.nowonbun.com/3.html</guid><pubDate>Wed, 3 Jul 2019 00:00:32 +0900</pubDate></item><item><title>[C# スタディ - 1] C#とは？</title><link>https://www.nowonbun.com/2.html</link><description><![CDATA[こんにちは。明月です。今日はc#を勉強する前にc#について説明します。プログラム言語はc、c++、java、c#など様々な言語があります。言語の誕生時期はc言語が一番早いし、次はmicrosoftからウィンドウ開発をしやすくするc++（mfc）、プログラムについて少しでも勉強したら聞いたかも知らない言語のjava、その次がこれから勉強しようと思うc#の順になります。誕生時期を見るとc#は上の4つの言語の中で最後になりますが、最後に誕生したから一番いい言語では思わられませんね。プログラム言語は各特徴があり、開発状況のたびに使う方法が違うと思います。各言語について簡単に説明するとc言語の場合はハードウェア系とos系(カーネル)、ドライバー系で主に使うし、c++(mfc)はグラフィック系またはc#で実装が大変な部分、c#よりメモリ管理が厳しい環境で使いますね。javaの場合はネットワークのウェブ系、アンドロイドモバイル系で使うし、c#はネットワークサーバクライアントウィンドウ（cs)系でよく使います。機能として使うところはそのとおりですが、プロジェクトの予算、環境などの影響でウィンドウプログラムをjavaで開発するし、c++とc#を混在して使う時もあります。c#は.net frameworkの上で動いています。.netframeworkはウィンドウosしかないのでlinuxやウィンドウ以外の環境では開発ができません。現在(2016年5月).netframeworkのバージョンは4.6まで発表してc#のバージョンは6.0まで発表しています。c#のバージョン別で説明すると下記のとおりになります。          c# バージョン    重要機能              c# 2.0               c# generics      anonymous method (匿名メソッド)      nullable type      partial type      c# yieldキーワード      delegateについてcovariance/contravariance                   c# 3.0               lambda expression (ラムダ)      anonymous type (匿名タイプ)      extension method ]]></description><category>Study / C#</category><author>nowonbun@gmail.com</author><guid>https://www.nowonbun.com/2.html</guid><pubDate>Wed, 3 Jul 2019 00:00:21 +0900</pubDate></item><item><title>Welcome</title><link>https://www.nowonbun.com/1.html</link><description><![CDATA[準備中]]></description><category>Other</category><author>nowonbun@gmail.com</author><guid>https://www.nowonbun.com/1.html</guid><pubDate>Mon, 1 Jul 2019 01:42:41 +0900</pubDate></item></channel></rss>